name: Test tap-postgres

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
    - .github/workflows/test.yml
    - log_based/**
    - pagila/**
    - ssh_tunnel/**
    - ssl/**
    - tap_postgres/**
    - tests/**
    - poetry.lock
    - pyproject.toml
    - tox.ini
  push:
    branches: [main]
    paths:
    - .github/workflows/test.yml
    - log_based/**
    - pagila/**
    - ssh_tunnel/**
    - ssl/**
    - tap_postgres/**
    - tests/**
    - poetry.lock
    - pyproject.toml
    - tox.ini
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      PIP_CONSTRAINT: ${{ github.workspace }}/.github/workflows/constraints.txt
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.12"
        - "3.11"
        - "3.10"
        - "3.9"
        - "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix Permissions
      run: |
        chmod 777 -R ./ssh_tunnel/ssh-server-config
        chmod 600 ssl/server.key
        sudo chown 999:999 ssl/server.key
        chmod 600 ssl/pkey.key

    - name: Build Postgres container
      run: |
        docker build . --tag meltano/log_based
    - name: Compose Postgres container
      run: |
        docker compose -f docker-compose.yml up -d --wait --wait-timeout=30

    - uses: isbang/compose-action@v2.0.2

 # Leaving comments as this makes testing the openssh docker image easier and should save someone some time later
 #   - name: Test SSH File Permissiosn
 #     run: |
 #       docker exec openssh-server ls -lsa /config/ssh_host_keys
 #       docker exec openssh-server cat  /config/logs/openssh/current
 #       docker exec openssh-server ps aux


    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - name: Upgrade pip
      run: |
        pip install pip
        pip --version
    - name: Install Poetry
      run: |
        pip install poetry
        poetry --version
    - name: Install dependencies
      run: |
        poetry env use python${{ matrix.python-version }}
        poetry install
    - name: Run pytest
      run: |
        poetry run pytest
    - name: Run lint
      run: |
        poetry run tox -e lint
